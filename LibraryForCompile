using System;
using System.Globalization;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace LibraryForCompile
{
    enum TypeOfLexeme { id, arithmetic_operator, logical_operator, separator, service_word, constant_value };
    enum ClassOfSymbol { null_class = -1, letter, numeral, arithmetic_sign, logical_sign, separator, service_symbol, another_symbol };

    abstract class Lexeme
    {
        public static Dictionary<string, TypeOfLexeme> tokens = new Dictionary<string, TypeOfLexeme>
        {
            {"begin", TypeOfLexeme.service_word}, {"int", TypeOfLexeme.service_word}, {"float", TypeOfLexeme.service_word}, 
            {"end", TypeOfLexeme.service_word}, {"for", TypeOfLexeme.service_word}, {"do", TypeOfLexeme.service_word}, 
            {"step", TypeOfLexeme.service_word}, {"until", TypeOfLexeme.service_word}, {"while", TypeOfLexeme.service_word}, 
            {"else", TypeOfLexeme.service_word}, {"if", TypeOfLexeme.service_word}, {"then", TypeOfLexeme.service_word}, 
            {"eqv", TypeOfLexeme.service_word}, {"implies", TypeOfLexeme.service_word}, {"or", TypeOfLexeme.logical_operator}, 
            {"and", TypeOfLexeme.logical_operator}, {"not", TypeOfLexeme.logical_operator}, {"true", TypeOfLexeme.service_word}, 
            {"false", TypeOfLexeme.service_word}, {":=", TypeOfLexeme.arithmetic_operator}, {"<", TypeOfLexeme.logical_operator},
            {"<=", TypeOfLexeme.logical_operator},  {">=", TypeOfLexeme.logical_operator}, {">", TypeOfLexeme.logical_operator}, 
            {"~=", TypeOfLexeme.logical_operator}, {"=", TypeOfLexeme.logical_operator}, {"+", TypeOfLexeme.arithmetic_operator}, 
            {"-", TypeOfLexeme.arithmetic_operator}, {"/", TypeOfLexeme.arithmetic_operator}, {"*", TypeOfLexeme.arithmetic_operator}, 
            {" ", TypeOfLexeme.separator}, {";", TypeOfLexeme.separator}
        };

        public static ClassOfSymbol checkSymbol(char ch)
        {
            if (Char.IsDigit(ch))
            {
                return ClassOfSymbol.numeral;
            }
            else if (Char.IsLetter(ch))
            {
                return ClassOfSymbol.letter;
            }
            else if (ch == '+' || ch == '-' || ch == '/' || ch == '*')
            {
                return ClassOfSymbol.arithmetic_sign;
            }
            else if (ch == ':' || ch == '.')
            {
                return ClassOfSymbol.service_symbol;
            }
            else if (ch == ',' || ch == ';' || ch == ' ')
            {
                return ClassOfSymbol.separator;
            }
            else if (ch == '>' || ch == '<' || ch == '~')
            {
                return ClassOfSymbol.logical_sign;
            }
            else if (ch == '=')
            {
                return ClassOfSymbol.logical_sign;
            }
            else
            {
                return ClassOfSymbol.another_symbol;
            }
        }

        public static TypeOfLexeme isTypeOfLexeme(string lexeme)
        {
            int resultOne;
            double resultTwo;

            if (Int32.TryParse(lexeme, out resultOne))
            {
                return TypeOfLexeme.constant_value;
            }
            if (Double.TryParse(lexeme, NumberStyles.Number, CultureInfo.InvariantCulture, out resultTwo))
            {
                return TypeOfLexeme.constant_value;
            }

            TypeOfLexeme typeOfLexeme;
            bool resultOfSearch = tokens.TryGetValue(lexeme, out typeOfLexeme);

            if (resultOfSearch)
            {
                return typeOfLexeme;
            }
            else 
            {
                return TypeOfLexeme.id;
            }
        }
    }
}
